=======================
ArchiveBot Installation
=======================

Backend (aka Bot)
=================

To run the bot, you will need:

- a Redis 2.8+ server
- a CouchDB server
- a Ruby 1.9 installation
- Bundler
- ExecJS supported runtime (for the dashboard -- see https://github.com/sstephenson/execjs)

(Little known fact: ArchiveBot is made to be as hard as possible to set up.)


Quick install, for Debian and Debian-esque systems like Ubuntu:

    sudo apt-get update
    sudo apt-get install bundler couchdb git tmux
    git clone https://github.com/ArchiveTeam/ArchiveBot.git
    cd ArchiveBot
    git submodule update --init
    bundle install

Next, install Redis. It is recommended that you build Redis from source (from http://redis.io/); version 2.8 or higher is recommended. On Debian/Ubuntu, you can do this, using version 2.8.17 as an example:

    apt-get install build-essential tcl8.5
    wget http://download.redis.io/releases/redis-2.8.17.tar.gz
    tar xzf redis-2.8.17.tar.gz
    cd redis-2.8.17
    make
    make test
    sudo make install

If you also want to set up Redis as a daemonized (always-running) service on your Debian/Ubuntu machine on port 6379, follow up with this:

    cd utils
    sudo ./install_server.sh
    (and then hit enter a bunch of times to accept the default values)

That way, if you need to stop or start Redis in the future, you can just do:

    sudo service redis_6379 stop
(or)
    sudo service redis_6379 start

Next we need to configure CouchDB.  But first, check to make sure it installed correctly and is currently running on your machine:

    curl http://127.0.0.1:5984/

If it's running, you should get back something like this:
{"couchdb":"Welcome","uuid":"610e43c2778c3be750ad5fff8cadd108","version":"1.5.0","vendor":{"version":"14.04","name":"Ubuntu"}}

Now we need to load up CouchDB with the "archivebot" and "archivebot_logs" databases.  You can do this from the command line with CURL:

    curl -X PUT http://127.0.0.1:5984/archivebot
    curl -X PUT http://127.0.0.1:5984/archivebot_logs\

If that works, you should get this back as a response each time:
    {"ok":true}

Now, go to the db/design_docs folder in ArchiveBot (full link: https://github.com/ArchiveTeam/ArchiveBot/tree/master/db/design_docs ).  You might have installed it somewhere like /home/archivebot/ArchiveBot/db/design_docs .  The four design documents in there need to be uploaded to the new archivebot database you just created. You can use CURL or you can use the Futon web interface at http://localhost:5984/_utils/index.html where you can copy and paste the content of the JSON files into new documents manually.  If you want to use CURL instead, do this:

    cd /home/archivebot/ArchiveBot/db/design_docs   (or wherever you put your files)
    curl -X PUT http://127.0.0.1:5984/archivebot/_design/archive_urls -d @archive_urls.json
    curl -X PUT http://127.0.0.1:5984/archivebot/_design/ignore_patterns -d @ignore_patterns.json
    curl -X PUT http://127.0.0.1:5984/archivebot/_design/jobs -d @jobs.json
    curl -X PUT http://127.0.0.1:5984/archivebot/_design/user_agents -d @user_agents.json

Once that's all in place, run the following:

    redis-server   # ensure it has no password
    bundle exec ruby bot.rb \
      -s 'irc://your-irc-host:6667' \
      -r 'redis://your-redis-host:6379/0' \
      -c '#archivebot' -n 'YourBot'

The bot should join the IRC channel.

You can run the dashboard webapp on the same machine, or a different machine:

    bundle exec ruby dashboard/app.rb \
      --redis 'redis://your-redis-host:6379/0' \
      --url 'http://your-dashboard-host:8080'

Configure twitter_conf.json if you want to post Twitter Tweets.

Run the cogs:

    bundle exec ruby cogs/start.rb

To upgrade, run `git pull` and restart.

bot.rb, dashboard/app.rb, and cogs/start.rb accept a --help option. Run them with --help to see accepted options.


Crawler (aka Pipeline)
======================

To run the pipeline, you will need:

- a Python 3.3+ installation
- Pip (for Python 3.3+)
- seesaw
- rsync
- wpull
- PhantomJS 1.9.7

Quick install, for Debian and Debian-esque systems:

    sudo apt-get update
    sudo apt-get install build-essential python3-dev python3-pip \
      libxml2-dev libxslt-dev zlib1g-dev libssl-dev libsqlite3-dev \
      git screen fontconfig-config fonts-dejavu-core \
      libfontconfig1 libjpeg-turbo8 libjpeg8

Set up a dedicated account:

  adduser archivebot

As user archivebot:

    ssh-keygen
      [keep hitting Enter]
    cat ~/.ssh/id_rsa.pub
      [send the public key to yipdw]
    cd ~/
    git clone https://github.com/ArchiveTeam/ArchiveBot
    cd ArchiveBot
    git submodule update --init
    pip3 install --user -r pipeline/requirements.txt
    pip3 install --user wpull

As user archivebot, in first screen session:

    ssh -C -L 127.0.0.1:16379:127.0.0.1:6379 \
      yourusername@archivebot.at.ninjawedding.org -N

As user archivebot, in second screen session:

    cd ~/ArchiveBot/pipeline
    export RSYNC_URL=rsync://fos.textfiles.com/archivebot/
    export REDIS_URL=redis://127.0.0.1:16379/0
    ~/.local/bin/run-pipeline3 pipeline.py --disable-web-server \
      --concurrent 2 ignorednick

Adjust --concurrent as needed.

If you want your pipeline to only handle !ao/!archiveonly jobs, run it with the AO_ONLY environment variable set:

    AO_ONLY=1 ~/.local/bin/run-pipeline3 pipeline.py \
      --disable-web-server --concurrent 2 ignorednick

or

    export AO_ONLY=1
    ~/.local/bin/run-pipeline3 pipeline.py --disable-web-server \
      --concurrent 2 ignorednick

To gracefully stop:

    touch ~/ArchiveBot/pipeline/STOP

To upgrade, run:

    pip3 install --user --upgrade -r pipeline/requirements.txt
    pip3 install --user --upgrade wpull

