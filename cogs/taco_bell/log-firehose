#!/usr/bin/env ruby

require 'redis'
require 'yajl'

r = Redis.new(:driver => :hiredis, :url => ARGV[0])

class Aggregator
  attr_accessor :job
  attr_accessor :job_ident

  def output(obj)
    $stdout.puts Yajl::Encoder.encode(obj.merge('job_data' => job_for_output))
    $stdout.flush
  end

  def job_for_output
    job.merge('ident' => job_ident)
  end
end

agg = Aggregator.new
p = Yajl::Parser.new
p.on_parse_complete = agg.method(:output)

$stdin.each_line do |line|
  job_key = line.chomp
  job = r.hgetall(job_key)

  agg.job = job
  agg.job_ident = job_key

  log_key = job['log_key']
  start = job['last_broadcasted_log_entry']
  log_entries = r.zrangebyscore(log_key, "(#{start}", '+inf', with_scores: true)

  next if log_entries.empty?

  log_entries.each do |entry, _|
    p << entry
  end

  r.hset(job_key, 'last_broadcasted_log_entry', log_entries.last.last)
end
